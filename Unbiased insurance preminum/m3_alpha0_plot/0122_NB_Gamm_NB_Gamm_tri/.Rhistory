# -------------------------------------------------------------------------------
# Simulation for NB-Gamma random effect Model
# -------------------------------------------------------------------------------
## Calculate premium, DIX, HMSE of Builhmann, commercial, Generalized commercial
# create alpha0 plot folder
set.seed(123)
path <- "C:/Users/none/Desktop/대학원/논문" # Download path
setwd(path)
path_ftn <- paste0(path, "/Unbiased insurance preminum")
ifelse(dir.exists(paste0(path_ftn,"\\m3_alpha0_plot")),F, dir.create(paste0(path_ftn,"\\m3_alpha0_plot") ) )
# import function to calculate each model
source(paste0(path_ftn,"/NB_Gamma_RE.R"))
#source("C:/Users/parkminji/Downloads/민지/Unbiased insurance preminum/NB_Gamma_RE.R")
# lam_vec case
#total_lam <- matrix(c(0.1,0.4,0.6,0.1,0.5,0.5,1.0,0.2,0.9,0.6,1.4,1.2),nrow = 4, ncol =3)
#standard from real data lamb_kappa
lamb.c1 <- c(0.1,0.5,0.9)
#lamb.c1 <- c(0.1,0.5,0.9)
# generate each lambda case
lamb.c2 <- c( mean(lamb.c1) - 1/4* sd(lamb.c1) ,mean(lamb.c1), mean(lamb.c1) + 1/4* sd(lamb.c1) )
lamb.c3 <- 4*lamb.c1
total_lam <- matrix(rbind(lamb.c1, lamb.c2,lamb.c3), ncol = length(lamb.c1))
# save results
df_tau = df <- data.frame()
for( tau in c(5,10)){
for(scen_num in 1:(dim(total_lam)[1])){
# save param
l <- list( N_sim = NA, tau = tau, lam_ = NA, a = NA, k = NA, s_hmse = NA, c_hmse = NA, gc_hmse = NA, c_dix = NA)
lambs = total_lam[scen_num,];
a = 0.8; N_sim = 1000; n_model = 3; k = 8;
# create lamb.vec with each prob
lam.vec_wo_last <- rep(lambs[-length(lambs)], rep(N_sim/length(lambs), length(lambs[-length(lambs)])))
lam_vec <- c(rep(lambs[length(lambs)], rep(N_sim - length(lam.vec_wo_last),1)), lam.vec_wo_last)
R = rgamma(N_sim, shape = a, rate = a)
# y1,...,ytau,ytau+1 빈공간 생성
Y = data.frame(matrix(nrow = N_sim, ncol = tau+1))
for(i in 1:N_sim){
for(j in 1: (tau+1) ){
Y[i,j] = rnbinom(1, size = k, prob = k/(k+lam_vec[i]*R[i]) )
}
}
# 각 모델에 대한 mod2의 알파0,알파1과 mod3의 알파0 계산
P <- prop_coeff(lam_vec, a, tau, k)
m2_alpha1 = (P["E_lam_y"] * P["E_lamsq_ybar"] - P["E_lam_y_ybar"] * mean(lam_vec^2))       /(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
m2_alpha0 = (P["E_lamsq_ybar"] * P["E_lam_y_ybar"] - P["E_lam_y"] * P["E_lamsq_ybarsq"])/(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
# m3에 대한 alpha0
result <- optim(par = c(0),
fn = optim_alpha ,
lam_vec = lam_vec, Y = Y,
control = list(fnscale = 1), method="BFGS")
# alpha 최적일때 err값
# (optim_alpha(lam_vec, Y, par=c(result$par)))
m3_alpha0 <- result$par
##########################################################
# plotting estimation of alpha0 for generalized comm
##########################################################
m3_alpha0_seq <- seq(0,1,length = 30)
HMSE_alpha0 <- rep(0, length(m3_alpha0_seq))
for(i in 1: length(m3_alpha0_seq)){
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0_seq[i])
# calculate HMSE of Gprem to check which is the best alpha0
HMSE_alpha0[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
}
# best HMSE for alpha0
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0)
best_HMSE <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
# save png for each alpha0
new_folder_name <- paste0(path_ftn,"\\m3_alpha0_plot\\", format(Sys.Date(),"%m%d"),"_NB_Gamm")
# version with triangle
new_folder_name_tri <- paste0(new_folder_name,"_NB_Gamm_tri")
if (!file.exists(new_folder_name_tri)){
dir.create(new_folder_name_tri)
}
setwd(new_folder_name_tri)
png(filename=paste(c('tau', tau,'alpha0.sim.nb',scen_num,'png'),collapse = '.'),width=2200,height=2000)
#dev.new()
x_axis_tick=seq(0,1,length=3)
y_axis_tick=round(seq(min(HMSE_alpha0),max(HMSE_alpha0),length=3),2)
par(oma = c(1,1,1,1))
par(mar=c(25,20,20,5)) # mar=c(아래,왼쪽,위,오른쪽)
#par(las = 1)
oldp <- par(mgp=c(3, 6.5, 0.5)) # mgp = c(메인 타이틀, 눈금 표시 레이블, 눈금 표시)
plot(m3_alpha0_seq,HMSE_alpha0,type = 'l', xlab =''
, ylab = "",xlim = c(0,1),
ylim = c(min(HMSE_alpha0),max(HMSE_alpha0))
,axes=FALSE, xaxt = 'n',yaxt = 'n', lwd = 5)
axis(side=1,at=x_axis_tick, cex.axis = 10, lwd = 4) #, mgp=c(0, 0,-100)
axis(side=2,at=y_axis_tick, cex.axis = 10, lwd = 4,mgp=c(0, 2,0))
mtext(expression(alpha[0]), side = 1, line= 20, cex = 12)
mtext("HMSE", side = 2, line= 12, cex = 12)
points(m3_alpha0, best_HMSE,pch = 17, cex = 8)
dev.off()
##########################################################
# final calculated premium, DIX, HMSE for each models
##########################################################
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0)
# HMSE 계산
HMSE <- rep(0, n_model)
for(i in (1:n_model)){
HMSE[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,i])
}
# 각 모델별 unbiasedness 확인
m2_DIX <- cal_UB(lam_vec, a, alpha0 = m2_alpha0,alpha1 = m2_alpha1 )
HMSE <- round(HMSE,4)
HMSE;
m2_DIX <- round(m2_DIX,4)
# to save each case
l['N_sim'] <- N_sim; l['tau'] <- tau; l['lam_'] <- paste(lambs, collapse = ","); l['a'] <- a; l['k'] <- k;
l['s_hmse'] <- HMSE[1]
l['c_hmse'] <- HMSE[2]
l['gc_hmse'] <- HMSE[3]
l['c_dix'] <- m2_DIX[[1]]
df_tau <- rbind(df_tau, data.frame(l))
print(df_tau)
}
df <- rbind(df, df_tau)
}
var(c(0.01, 0.05))
mean(c(0.01,0.05))
mean(c(0.01,0.05,1.3))
mean(c(0.01,0.05,1.5))
mean(c(0.01,0.05,1.4))
mean(c(0.01,0.05,1.43))
mean(c(0.01,0.05,1.433))
mean(c(0.01,0.05,1.4333))
mean(c(0.01,0.05,1.5))
mean(c(0.01,0.05,1.45))
var(c(0.01,0.05,1.45))
# -------------------------------------------------------------------------------
# Simulation for NB-Gamma random effect Model
# -------------------------------------------------------------------------------
## Calculate premium, DIX, HMSE of Builhmann, commercial, Generalized commercial
# create alpha0 plot folder
set.seed(123)
path <- "C:/Users/none/Desktop/대학원/논문" # Download path
setwd(path)
path_ftn <- paste0(path, "/Unbiased insurance preminum")
ifelse(dir.exists(paste0(path_ftn,"\\m3_alpha0_plot")),F, dir.create(paste0(path_ftn,"\\m3_alpha0_plot") ) )
# import function to calculate each model
source(paste0(path_ftn,"/NB_Gamma_RE.R"))
#source("C:/Users/parkminji/Downloads/민지/Unbiased insurance preminum/NB_Gamma_RE.R")
# lam_vec case
#total_lam <- matrix(c(0.1,0.4,0.6,0.1,0.5,0.5,1.0,0.2,0.9,0.6,1.4,1.2),nrow = 4, ncol =3)
#standard from real data lamb_kappa
lamb.c1 <- c(0.1,0.5,0.9)
#lamb.c1 <- c(0.1,0.5,0.9)
# generate each lambda case
lamb.c2 <- c( mean(lamb.c1) - 1/4* sd(lamb.c1) ,mean(lamb.c1), mean(lamb.c1) + 1/4* sd(lamb.c1) )
lamb.c3 <- 4*lamb.c1
lamb.c4 <- c(0.01,0.05,1.45)
total_lam <- matrix(rbind(lamb.c1, lamb.c2,lamb.c3, lamb.c4), ncol = length(lamb.c1))
# save results
df_tau = df <- data.frame()
for( tau in c(5,10)){
for(scen_num in 1:(dim(total_lam)[1])){
# save param
l <- list( N_sim = NA, tau = tau, lam_ = NA, a = NA, k = NA, s_hmse = NA, c_hmse = NA, gc_hmse = NA, c_dix = NA)
lambs = total_lam[scen_num,];
a = 0.8; N_sim = 1000; n_model = 3; k = 8;
# create lamb.vec with each prob
lam.vec_wo_last <- rep(lambs[-length(lambs)], rep(N_sim/length(lambs), length(lambs[-length(lambs)])))
lam_vec <- c(rep(lambs[length(lambs)], rep(N_sim - length(lam.vec_wo_last),1)), lam.vec_wo_last)
R = rgamma(N_sim, shape = a, rate = a)
# y1,...,ytau,ytau+1 빈공간 생성
Y = data.frame(matrix(nrow = N_sim, ncol = tau+1))
for(i in 1:N_sim){
for(j in 1: (tau+1) ){
Y[i,j] = rnbinom(1, size = k, prob = k/(k+lam_vec[i]*R[i]) )
}
}
# 각 모델에 대한 mod2의 알파0,알파1과 mod3의 알파0 계산
P <- prop_coeff(lam_vec, a, tau, k)
m2_alpha1 = (P["E_lam_y"] * P["E_lamsq_ybar"] - P["E_lam_y_ybar"] * mean(lam_vec^2))       /(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
m2_alpha0 = (P["E_lamsq_ybar"] * P["E_lam_y_ybar"] - P["E_lam_y"] * P["E_lamsq_ybarsq"])/(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
# m3에 대한 alpha0
result <- optim(par = c(0),
fn = optim_alpha ,
lam_vec = lam_vec, Y = Y,
control = list(fnscale = 1), method="BFGS")
# alpha 최적일때 err값
# (optim_alpha(lam_vec, Y, par=c(result$par)))
m3_alpha0 <- result$par
##########################################################
# plotting estimation of alpha0 for generalized comm
##########################################################
m3_alpha0_seq <- seq(0,1,length = 30)
HMSE_alpha0 <- rep(0, length(m3_alpha0_seq))
for(i in 1: length(m3_alpha0_seq)){
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0_seq[i])
# calculate HMSE of Gprem to check which is the best alpha0
HMSE_alpha0[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
}
# best HMSE for alpha0
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0)
best_HMSE <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
# save png for each alpha0
new_folder_name <- paste0(path_ftn,"\\m3_alpha0_plot\\", format(Sys.Date(),"%m%d"),"_NB_Gamm")
# version with triangle
new_folder_name_tri <- paste0(new_folder_name,"_NB_Gamm_tri")
if (!file.exists(new_folder_name_tri)){
dir.create(new_folder_name_tri)
}
setwd(new_folder_name_tri)
png(filename=paste(c('tau', tau,'alpha0.sim.nb',scen_num,'png'),collapse = '.'),width=2200,height=2000)
#dev.new()
x_axis_tick=seq(0,1,length=3)
y_axis_tick=round(seq(min(HMSE_alpha0),max(HMSE_alpha0),length=3),2)
par(oma = c(1,1,1,1))
par(mar=c(25,20,20,5)) # mar=c(아래,왼쪽,위,오른쪽)
#par(las = 1)
oldp <- par(mgp=c(3, 6.5, 0.5)) # mgp = c(메인 타이틀, 눈금 표시 레이블, 눈금 표시)
plot(m3_alpha0_seq,HMSE_alpha0,type = 'l', xlab =''
, ylab = "",xlim = c(0,1),
ylim = c(min(HMSE_alpha0),max(HMSE_alpha0))
,axes=FALSE, xaxt = 'n',yaxt = 'n', lwd = 5)
axis(side=1,at=x_axis_tick, cex.axis = 10, lwd = 4) #, mgp=c(0, 0,-100)
axis(side=2,at=y_axis_tick, cex.axis = 10, lwd = 4,mgp=c(0, 2,0))
mtext(expression(alpha[0]), side = 1, line= 20, cex = 12)
mtext("HMSE", side = 2, line= 12, cex = 12)
points(m3_alpha0, best_HMSE,pch = 17, cex = 8)
dev.off()
##########################################################
# final calculated premium, DIX, HMSE for each models
##########################################################
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0)
# HMSE 계산
HMSE <- rep(0, n_model)
for(i in (1:n_model)){
HMSE[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,i])
}
# 각 모델별 unbiasedness 확인
m2_DIX <- cal_UB(lam_vec, a, alpha0 = m2_alpha0,alpha1 = m2_alpha1 )
HMSE <- round(HMSE,4)
HMSE;
m2_DIX <- round(m2_DIX,4)
# to save each case
l['N_sim'] <- N_sim; l['tau'] <- tau; l['lam_'] <- paste(lambs, collapse = ","); l['a'] <- a; l['k'] <- k;
l['s_hmse'] <- HMSE[1]
l['c_hmse'] <- HMSE[2]
l['gc_hmse'] <- HMSE[3]
l['c_dix'] <- m2_DIX[[1]]
df_tau <- rbind(df_tau, data.frame(l))
print(df_tau)
}
df <- rbind(df, df_tau)
}
ifelse(dir.exists(paste0(path_ftn,"\\result")),F, dir.create(paste0(path_ftn,"\\result")) )
new_result_sim_nb <- paste0(path_ftn,"\\result\\", format(Sys.Date(),"%m%d"),"_Sim")
if (!file.exists(new_result_sim_nb)){
dir.create(new_result_sim_nb)
}
filename <- paste0("/",format(Sys.Date(),"%m%d"), "_sim_NB_gamm.csv")
write.csv(df_tau, file = paste0(new_result_sim_nb,"/sim_NB_gamm.csv"))
# -------------------------------------------------------------------------------
# Simulation for NB-Gamma random effect Model
# -------------------------------------------------------------------------------
## Calculate premium, DIX, HMSE of Builhmann, commercial, Generalized commercial
# create alpha0 plot folder
set.seed(1234)
path <- "C:/Users/none/Desktop/대학원/논문" # Download path
setwd(path)
path_ftn <- paste0(path, "/Unbiased insurance preminum")
ifelse(dir.exists(paste0(path_ftn,"\\m3_alpha0_plot")),F, dir.create(paste0(path_ftn,"\\m3_alpha0_plot") ) )
# import function to calculate each model
source(paste0(path_ftn,"/NB_Gamma_RE.R"))
#source("C:/Users/parkminji/Downloads/민지/Unbiased insurance preminum/NB_Gamma_RE.R")
# lam_vec case
#total_lam <- matrix(c(0.1,0.4,0.6,0.1,0.5,0.5,1.0,0.2,0.9,0.6,1.4,1.2),nrow = 4, ncol =3)
#standard from real data lamb_kappa
lamb.c1 <- c(0.1,0.5,0.9)
#lamb.c1 <- c(0.1,0.5,0.9)
# generate each lambda case
lamb.c2 <- c( mean(lamb.c1) - 1/4* sd(lamb.c1) ,mean(lamb.c1), mean(lamb.c1) + 1/4* sd(lamb.c1) )
lamb.c3 <- 4*lamb.c1
lamb.c4 <- c(0.01,0.05,1.45)
total_lam <- matrix(rbind(lamb.c1, lamb.c2,lamb.c3, lamb.c4), ncol = length(lamb.c1))
# save results
df_tau = df <- data.frame()
for( tau in c(5,10)){
for(scen_num in 1:(dim(total_lam)[1])){
# save param
l <- list( N_sim = NA, tau = tau, lam_ = NA, a = NA, k = NA, s_hmse = NA, c_hmse = NA, gc_hmse = NA, c_dix = NA)
lambs = total_lam[scen_num,];
a = 0.8; N_sim = 1000; n_model = 3; k = 8;
# create lamb.vec with each prob
lam.vec_wo_last <- rep(lambs[-length(lambs)], rep(N_sim/length(lambs), length(lambs[-length(lambs)])))
lam_vec <- c(rep(lambs[length(lambs)], rep(N_sim - length(lam.vec_wo_last),1)), lam.vec_wo_last)
R = rgamma(N_sim, shape = a, rate = a)
# y1,...,ytau,ytau+1 빈공간 생성
Y = data.frame(matrix(nrow = N_sim, ncol = tau+1))
for(i in 1:N_sim){
for(j in 1: (tau+1) ){
Y[i,j] = rnbinom(1, size = k, prob = k/(k+lam_vec[i]*R[i]) )
}
}
# 각 모델에 대한 mod2의 알파0,알파1과 mod3의 알파0 계산
P <- prop_coeff(lam_vec, a, tau, k)
m2_alpha1 = (P["E_lam_y"] * P["E_lamsq_ybar"] - P["E_lam_y_ybar"] * mean(lam_vec^2))       /(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
m2_alpha0 = (P["E_lamsq_ybar"] * P["E_lam_y_ybar"] - P["E_lam_y"] * P["E_lamsq_ybarsq"])/(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
# m3에 대한 alpha0
result <- optim(par = c(0),
fn = optim_alpha ,
lam_vec = lam_vec, Y = Y,
control = list(fnscale = 1), method="BFGS")
# alpha 최적일때 err값
# (optim_alpha(lam_vec, Y, par=c(result$par)))
m3_alpha0 <- result$par
##########################################################
# plotting estimation of alpha0 for generalized comm
##########################################################
m3_alpha0_seq <- seq(0,1,length = 30)
HMSE_alpha0 <- rep(0, length(m3_alpha0_seq))
for(i in 1: length(m3_alpha0_seq)){
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0_seq[i])
# calculate HMSE of Gprem to check which is the best alpha0
HMSE_alpha0[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
}
# best HMSE for alpha0
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0)
best_HMSE <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
# save png for each alpha0
new_folder_name <- paste0(path_ftn,"\\m3_alpha0_plot\\", format(Sys.Date(),"%m%d"),"_NB_Gamm")
# version with triangle
new_folder_name_tri <- paste0(new_folder_name,"_NB_Gamm_tri")
if (!file.exists(new_folder_name_tri)){
dir.create(new_folder_name_tri)
}
setwd(new_folder_name_tri)
png(filename=paste(c('tau', tau,'alpha0.sim.nb',scen_num,'png'),collapse = '.'),width=2200,height=2000)
#dev.new()
x_axis_tick=seq(0,1,length=3)
y_axis_tick=round(seq(min(HMSE_alpha0),max(HMSE_alpha0),length=3),2)
par(oma = c(1,1,1,1))
par(mar=c(25,20,20,5)) # mar=c(아래,왼쪽,위,오른쪽)
#par(las = 1)
oldp <- par(mgp=c(3, 6.5, 0.5)) # mgp = c(메인 타이틀, 눈금 표시 레이블, 눈금 표시)
plot(m3_alpha0_seq,HMSE_alpha0,type = 'l', xlab =''
, ylab = "",xlim = c(0,1),
ylim = c(min(HMSE_alpha0),max(HMSE_alpha0))
,axes=FALSE, xaxt = 'n',yaxt = 'n', lwd = 5)
axis(side=1,at=x_axis_tick, cex.axis = 10, lwd = 4) #, mgp=c(0, 0,-100)
axis(side=2,at=y_axis_tick, cex.axis = 10, lwd = 4,mgp=c(0, 2,0))
mtext(expression(alpha[0]), side = 1, line= 20, cex = 12)
mtext("HMSE", side = 2, line= 12, cex = 12)
points(m3_alpha0, best_HMSE,pch = 17, cex = 8)
dev.off()
##########################################################
# final calculated premium, DIX, HMSE for each models
##########################################################
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0)
# HMSE 계산
HMSE <- rep(0, n_model)
for(i in (1:n_model)){
HMSE[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,i])
}
# 각 모델별 unbiasedness 확인
m2_DIX <- cal_UB(lam_vec, a, alpha0 = m2_alpha0,alpha1 = m2_alpha1 )
HMSE <- round(HMSE,4)
HMSE;
m2_DIX <- round(m2_DIX,4)
# to save each case
l['N_sim'] <- N_sim; l['tau'] <- tau; l['lam_'] <- paste(lambs, collapse = ","); l['a'] <- a; l['k'] <- k;
l['s_hmse'] <- HMSE[1]
l['c_hmse'] <- HMSE[2]
l['gc_hmse'] <- HMSE[3]
l['c_dix'] <- m2_DIX[[1]]
df_tau <- rbind(df_tau, data.frame(l))
print(df_tau)
}
df <- rbind(df, df_tau)
}
ifelse(dir.exists(paste0(path_ftn,"\\result")),F, dir.create(paste0(path_ftn,"\\result")) )
new_result_sim_nb <- paste0(path_ftn,"\\result\\", format(Sys.Date(),"%m%d"),"_Sim")
if (!file.exists(new_result_sim_nb)){
dir.create(new_result_sim_nb)
}
filename <- paste0("/",format(Sys.Date(),"%m%d"), "_sim_NB_gamm.csv")
write.csv(df_tau, file = paste0(new_result_sim_nb,"/sim_NB_gamm.csv"))
mean(c(0.01,0.04,1.45))
# -------------------------------------------------------------------------------
# Simulation for NB-Gamma random effect Model
# -------------------------------------------------------------------------------
## Calculate premium, DIX, HMSE of Builhmann, commercial, Generalized commercial
# create alpha0 plot folder
set.seed(1234)
path <- "C:/Users/none/Desktop/대학원/논문" # Download path
setwd(path)
path_ftn <- paste0(path, "/Unbiased insurance preminum")
ifelse(dir.exists(paste0(path_ftn,"\\m3_alpha0_plot")),F, dir.create(paste0(path_ftn,"\\m3_alpha0_plot") ) )
# import function to calculate each model
source(paste0(path_ftn,"/NB_Gamma_RE.R"))
#source("C:/Users/parkminji/Downloads/민지/Unbiased insurance preminum/NB_Gamma_RE.R")
# lam_vec case
#total_lam <- matrix(c(0.1,0.4,0.6,0.1,0.5,0.5,1.0,0.2,0.9,0.6,1.4,1.2),nrow = 4, ncol =3)
#standard from real data lamb_kappa
lamb.c1 <- c(0.1,0.5,0.9)
#lamb.c1 <- c(0.1,0.5,0.9)
# generate each lambda case
lamb.c2 <- c( mean(lamb.c1) - 1/4* sd(lamb.c1) ,mean(lamb.c1), mean(lamb.c1) + 1/4* sd(lamb.c1) )
lamb.c3 <- 4*lamb.c1
lamb.c4 <- c(0.01,0.04,1.45)
total_lam <- matrix(rbind(lamb.c1, lamb.c2,lamb.c3, lamb.c4), ncol = length(lamb.c1))
# save results
df_tau = df <- data.frame()
for( tau in c(5,10)){
for(scen_num in 1:(dim(total_lam)[1])){
# save param
l <- list( N_sim = NA, tau = tau, lam_ = NA, a = NA, k = NA, s_hmse = NA, c_hmse = NA, gc_hmse = NA, c_dix = NA)
lambs = total_lam[scen_num,];
a = 0.8; N_sim = 1000; n_model = 3; k = 8;
# create lamb.vec with each prob
lam.vec_wo_last <- rep(lambs[-length(lambs)], rep(N_sim/length(lambs), length(lambs[-length(lambs)])))
lam_vec <- c(rep(lambs[length(lambs)], rep(N_sim - length(lam.vec_wo_last),1)), lam.vec_wo_last)
R = rgamma(N_sim, shape = a, rate = a)
# y1,...,ytau,ytau+1 빈공간 생성
Y = data.frame(matrix(nrow = N_sim, ncol = tau+1))
for(i in 1:N_sim){
for(j in 1: (tau+1) ){
Y[i,j] = rnbinom(1, size = k, prob = k/(k+lam_vec[i]*R[i]) )
}
}
# 각 모델에 대한 mod2의 알파0,알파1과 mod3의 알파0 계산
P <- prop_coeff(lam_vec, a, tau, k)
m2_alpha1 = (P["E_lam_y"] * P["E_lamsq_ybar"] - P["E_lam_y_ybar"] * mean(lam_vec^2))       /(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
m2_alpha0 = (P["E_lamsq_ybar"] * P["E_lam_y_ybar"] - P["E_lam_y"] * P["E_lamsq_ybarsq"])/(P["E_lamsq_ybar"]^2-P["E_lamsq_ybarsq"]*mean(lam_vec^2))
# m3에 대한 alpha0
result <- optim(par = c(0),
fn = optim_alpha ,
lam_vec = lam_vec, Y = Y,
control = list(fnscale = 1), method="BFGS")
# alpha 최적일때 err값
# (optim_alpha(lam_vec, Y, par=c(result$par)))
m3_alpha0 <- result$par
##########################################################
# plotting estimation of alpha0 for generalized comm
##########################################################
m3_alpha0_seq <- seq(0,1,length = 30)
HMSE_alpha0 <- rep(0, length(m3_alpha0_seq))
for(i in 1: length(m3_alpha0_seq)){
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0_seq[i])
# calculate HMSE of Gprem to check which is the best alpha0
HMSE_alpha0[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
}
# best HMSE for alpha0
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0 = m3_alpha0)
best_HMSE <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,3])
# save png for each alpha0
new_folder_name <- paste0(path_ftn,"\\m3_alpha0_plot\\", format(Sys.Date(),"%m%d"),"_NB_Gamm")
# version with triangle
new_folder_name_tri <- paste0(new_folder_name,"_NB_Gamm_tri")
if (!file.exists(new_folder_name_tri)){
dir.create(new_folder_name_tri)
}
setwd(new_folder_name_tri)
png(filename=paste(c('tau', tau,'alpha0.sim.nb',scen_num,'png'),collapse = '.'),width=2200,height=2000)
#dev.new()
x_axis_tick=seq(0,1,length=3)
y_axis_tick=round(seq(min(HMSE_alpha0),max(HMSE_alpha0),length=3),2)
par(oma = c(1,1,1,1))
par(mar=c(25,20,20,5)) # mar=c(아래,왼쪽,위,오른쪽)
#par(las = 1)
oldp <- par(mgp=c(3, 6.5, 0.5)) # mgp = c(메인 타이틀, 눈금 표시 레이블, 눈금 표시)
plot(m3_alpha0_seq,HMSE_alpha0,type = 'l', xlab =''
, ylab = "",xlim = c(0,1),
ylim = c(min(HMSE_alpha0),max(HMSE_alpha0))
,axes=FALSE, xaxt = 'n',yaxt = 'n', lwd = 5)
axis(side=1,at=x_axis_tick, cex.axis = 10, lwd = 4) #, mgp=c(0, 0,-100)
axis(side=2,at=y_axis_tick, cex.axis = 10, lwd = 4,mgp=c(0, 2,0))
mtext(expression(alpha[0]), side = 1, line= 20, cex = 12)
mtext("HMSE", side = 2, line= 12, cex = 12)
points(m3_alpha0, best_HMSE,pch = 17, cex = 8)
dev.off()
##########################################################
# final calculated premium, DIX, HMSE for each models
##########################################################
# 각 모델별 예측값 추출
Yhat <- Yhat_ftn( N_sim, n_model, tau, lam_vec, Y, m2_alpha0, m2_alpha1, m3_alpha0)
# HMSE 계산
HMSE <- rep(0, n_model)
for(i in (1:n_model)){
HMSE[i] <- cal_pred(lam_vec, Y = Y[,tau+1], Theta = R, type = 'HMSE', Prem = Yhat[,i])
}
# 각 모델별 unbiasedness 확인
m2_DIX <- cal_UB(lam_vec, a, alpha0 = m2_alpha0,alpha1 = m2_alpha1 )
HMSE <- round(HMSE,4)
HMSE;
m2_DIX <- round(m2_DIX,4)
# to save each case
l['N_sim'] <- N_sim; l['tau'] <- tau; l['lam_'] <- paste(lambs, collapse = ","); l['a'] <- a; l['k'] <- k;
l['s_hmse'] <- HMSE[1]
l['c_hmse'] <- HMSE[2]
l['gc_hmse'] <- HMSE[3]
l['c_dix'] <- m2_DIX[[1]]
df_tau <- rbind(df_tau, data.frame(l))
print(df_tau)
}
df <- rbind(df, df_tau)
}
ifelse(dir.exists(paste0(path_ftn,"\\result")),F, dir.create(paste0(path_ftn,"\\result")) )
new_result_sim_nb <- paste0(path_ftn,"\\result\\", format(Sys.Date(),"%m%d"),"_Sim")
if (!file.exists(new_result_sim_nb)){
dir.create(new_result_sim_nb)
}
filename <- paste0("/",format(Sys.Date(),"%m%d"), "_sim_NB_gamm.csv")
write.csv(df_tau, file = paste0(new_result_sim_nb,"/sim_NB_gamm.csv"))
